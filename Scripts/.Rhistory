tuneLength = 25,
trControl  = cv_ctrl
)
print(enet_fit)        # cross-validated performance & best α, λ
## Evaluate on unseen test data
y_pred <- predict(enet_fit, X_test)
r2_test <- cor(y_test, y_pred)^2
cat("PRSMix without covariates Performance =", round(r2_test, 3), "\n")
# Combine elastic-net R² with individual R²
# Plot
# Create R² results data frame
r2_all <- data.frame(
Predictor = c(pgs_names, "ElasticNet_Combined"),  # Rename if needed
R2        = c(r2_individual, r2_test)
)
# Reorder Predictor factor levels for plotting
r2_all$Predictor <- factor(r2_all$Predictor,
levels = r2_all$Predictor[order(r2_all$R2, decreasing = TRUE)])
# Plot with labeled bars and highlighted Elastic Net model
ggplot(r2_all, aes(x = Predictor, y = R2,
fill = Predictor == "ElasticNet_Combined")) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(R2, 3)),
vjust = -0.3, size = 2.5) +  # vjust controls vertical placement
scale_fill_manual(values = c("steelblue", "darkred"), guide = FALSE) +
labs(title = "Test Set R²: Individual PGS vs Combined PGS Model",
x = "Predictor",
y = expression(R^2)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save Plot 2
ggsave("PRSMix and Single PRS Comparison.png", plot = p2, width = 8, height = 5, dpi = 300)
# Combine elastic-net R² with individual R²
# Plot
# Create R² results data frame
r2_all <- data.frame(
Predictor = c(pgs_names, "ElasticNet_Combined"),  # Rename if needed
R2        = c(r2_individual, r2_test)
)
# Reorder Predictor factor levels for plotting
r2_all$Predictor <- factor(r2_all$Predictor,
levels = r2_all$Predictor[order(r2_all$R2, decreasing = TRUE)])
# Plot with labeled bars and highlighted Elastic Net model
ggplot(r2_all, aes(x = Predictor, y = R2,
fill = Predictor == "PRSMix")) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(R2, 3)),
vjust = -0.3, size = 2.5) +  # vjust controls vertical placement
scale_fill_manual(values = c("steelblue", "darkred"), guide = FALSE) +
labs(title = "Test Set R²: Individual PGS vs Combined PGS Model",
x = "Predictor",
y = expression(R^2)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save Plot 2
ggsave("PRSMix and Single PRS Comparison.png", plot = p2, width = 8, height = 5, dpi = 300)
# Combine elastic-net R² with individual R²
# Plot
# Create R² results data frame
r2_all <- data.frame(
Predictor = c(pgs_names, "ElasticNet_Combined"),  # Rename if needed
R2        = c(r2_individual, r2_test)
)
# Reorder Predictor factor levels for plotting
r2_all$Predictor <- factor(r2_all$Predictor,
levels = r2_all$Predictor[order(r2_all$R2, decreasing = TRUE)])
# Plot with labeled bars and highlighted Elastic Net model
ggplot(r2_all, aes(x = Predictor, y = R2,
fill = Predictor == "PRSMix")) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(R2, 3)),
vjust = -0.3, size = 2.5) +  # vjust controls vertical placement
scale_fill_manual(values = c("steelblue", "darkred"), guide = FALSE) +
labs(title = "Test Set R²: Individual PGS vs Combined PGS Model",
x = "Predictor",
y = expression(R^2)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save Plot 2
ggsave("PRSMix and Single PRS Comparison.png", plot = p2, width = 8, height = 5, dpi = 300)
# Combine elastic-net R² with individual R²
# Plot
# Create R² results data frame
r2_all <- data.frame(
Predictor = c(pgs_names, "ElasticNet_Combined"),  # Rename if needed
R2        = c(r2_individual, r2_test)
)
# Reorder Predictor factor levels for plotting
r2_all$Predictor <- factor(r2_all$Predictor,
levels = r2_all$Predictor[order(r2_all$R2, decreasing = TRUE)])
# Plot with labeled bars and highlighted Elastic Net model
ggplot(r2_all, aes(x = Predictor, y = R2,
fill = Predictor == "PRSMix")) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(R2, 3)),
vjust = -0.3, size = 2.5) +  # vjust controls vertical placement
scale_fill_manual(values = c("steelblue", "darkred"), guide = FALSE) +
labs(title = "Test Set R²: Individual PGS vs Combined PGS Model",
x = "Predictor",
y = expression(R^2)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save Plot 2
ggsave("PRSMix and Single PRS Comparison.png", plot = p2, width = 8, height = 5, dpi = 300)
# Combine elastic-net R² with individual R²
# Plot
# Create R² results data frame
r2_all <- data.frame(
Predictor = c(pgs_names, "PRSMix"),
R2        = c(r2_individual, r2_test)
)
# Reorder Predictor factor levels for plotting
r2_all$Predictor <- factor(r2_all$Predictor,
levels = r2_all$Predictor[order(r2_all$R2, decreasing = TRUE)])
# Plot with labeled bars and highlighted Elastic Net model
ggplot(r2_all, aes(x = Predictor, y = R2,
fill = Predictor == "ElasticNet_Combined")) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(R2, 3)),
vjust = -0.3, size = 2.5) +  # vjust controls vertical placement
scale_fill_manual(values = c("steelblue", "darkred"), guide = FALSE) +
labs(title = "Test Set R²: Individual PGS vs Combined PGS Model",
x = "Predictor",
y = expression(R^2)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save Plot 2
ggsave("PRSMix and Single PRS C.png", plot = p2, width = 8, height = 5, dpi = 300)
# Combine elastic-net R² with individual R²
# Plot
# Create R² results data frame
r2_all <- data.frame(
Predictor = c(pgs_names, "PRSmix"),
R2        = c(r2_individual, r2_test)
)
# Reorder Predictor factor levels for plotting
r2_all$Predictor <- factor(r2_all$Predictor,
levels = r2_all$Predictor[order(r2_all$R2, decreasing = TRUE)])
# Plot with labeled bars and highlighted Elastic Net model
ggplot(r2_all, aes(x = Predictor, y = R2,
fill = Predictor == "ElasticNet_Combined")) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(R2, 3)),
vjust = -0.3, size = 2.5) +  # vjust controls vertical placement
scale_fill_manual(values = c("steelblue", "darkred"), guide = FALSE) +
labs(title = "Test Set R²: Individual PGS vs Combined PGS Model",
x = "Predictor",
y = expression(R^2)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save Plot 2
ggsave("PRSMix and Single PRS C.png", plot = p2, width = 8, height = 5, dpi = 300)
# Combine elastic-net R² with individual R²
# Plot
# Create R² results data frame
r2_all <- data.frame(
Predictor = c(pgs_names, "PRSmix"),
R2        = c(r2_individual, r2_test)
)
# Reorder Predictor factor levels for plotting
r2_all$Predictor <- factor(r2_all$Predictor,
levels = r2_all$Predictor[order(r2_all$R2, decreasing = TRUE)])
# Plot with labeled bars and highlighted Elastic Net model
ggplot(r2_all, aes(x = Predictor, y = R2,
fill = Predictor == "ElasticNet_Combined")) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(R2, 3)),
vjust = -0.3, size = 2.5) +  # vjust controls vertical placement
scale_fill_manual(values = c("steelblue", "darkred"), guide = FALSE) +
labs(title = "Individual PGS vs PRSmix Model",
x = "Predictor",
y = expression(R^2)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save Plot 2
ggsave("PRSMix and Single PRS C.png", plot = p2, width = 8, height = 5, dpi = 300)
# Combine elastic-net R² with individual R²
# Plot
# Create R² results data frame
r2_all <- data.frame(
Predictor = c(pgs_names, "PRSmix"),
R2        = c(r2_individual, r2_test)
)
# Reorder Predictor factor levels for plotting
r2_all$Predictor <- factor(r2_all$Predictor,
levels = r2_all$Predictor[order(r2_all$R2, decreasing = TRUE)])
# Plot with labeled bars and highlighted Elastic Net model
ggplot(r2_all, aes(x = Predictor, y = Predictive Performance (R2),
# Plot with labeled bars and highlighted Elastic Net model
ggplot(r2_all, aes(x = Predictor, y = "Predictive Performance (R2)",
fill = Predictor == "ElasticNet_Combined")) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(R2, 3)),
vjust = -0.3, size = 2.5) +  # vjust controls vertical placement
scale_fill_manual(values = c("steelblue", "darkred"), guide = FALSE) +
labs(title = "Individual PGS vs PRSmix Model",
x = "Predictor",
y = expression(R^2)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save Plot 2
ggsave("PRSMix and Single PRS C.png", plot = p2, width = 8, height = 5, dpi = 300)
# Combine elastic-net R² with individual R²
# Plot
# Create R² results data frame
r2_all <- data.frame(
Predictor = c(pgs_names, "PRSmix"),
R2        = c(r2_individual, r2_test)
)
# Reorder Predictor factor levels for plotting
r2_all$Predictor <- factor(r2_all$Predictor,
levels = r2_all$Predictor[order(r2_all$R2, decreasing = TRUE)])
# Plot with labeled bars and highlighted Elastic Net model
ggplot(r2_all, aes(x = Predictor, y = R2,
fill = Predictor == "ElasticNet_Combined")) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(R2, 3)),
vjust = -0.3, size = 2.5) +  # vjust controls vertical placement
scale_fill_manual(values = c("steelblue", "darkred"), guide = FALSE) +
labs(title = "Individual PGS vs PRSmix Model",
x = "Predictor",
y = expression(R^2)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save Plot 2
ggsave("PRSMix and Single PRS C.png", plot = p2, width = 8, height = 5, dpi = 300)
# Combine elastic-net R² with individual R²
# Plot
# Create R² results data frame
r2_all <- data.frame(
Predictor = c(pgs_names, "PRSmix"),
R2        = c(r2_individual, r2_test)
)
# Reorder Predictor factor levels for plotting
r2_all$Predictor <- factor(r2_all$Predictor,
levels = r2_all$Predictor[order(r2_all$R2, decreasing = TRUE)])
# Plot with labeled bars and highlighted Elastic Net model
ggplot(r2_all, aes(x = Predictor, y = R2,
fill = Predictor == "ElasticNet_Combined")) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(R2, 3)),
vjust = -0.3, size = 2.5) +  # vjust controls vertical placement
scale_fill_manual(values = c("steelblue", "darkred"), guide = FALSE) +
labs(title = "Predictive Performance (Individual PGS vs PRSmix Model)",
x = "Predictor",
y = expression(R^2)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save Plot 2
ggsave("PRSMix and Single PRS C.png", plot = p2, width = 8, height = 5, dpi = 300)
# Combine elastic-net R² with individual R²
# Plot
# Create R² results data frame
r2_all <- data.frame(
Predictor = c(pgs_names, "PRSmix"),
R2        = c(r2_individual, r2_test)
)
# Reorder Predictor factor levels for plotting
r2_all$Predictor <- factor(r2_all$Predictor,
levels = r2_all$Predictor[order(r2_all$R2, decreasing = TRUE)])
# Plot with labeled bars and highlighted Elastic Net model
Mix_vs_Single <- ggplot(r2_all, aes(x = Predictor, y = R2,
fill = Predictor == "ElasticNet_Combined")) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(R2, 3)),
vjust = -0.3, size = 2.5) +  # vjust controls vertical placement
scale_fill_manual(values = c("steelblue", "darkred"), guide = FALSE) +
labs(title = "Predictive Performance (Individual PGS vs PRSmix Model)",
x = "Predictor",
y = expression(R^2)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save Plot 2
ggsave("PRSMix and Single PRS C.png", plot = Mix_vs_Single, width = 8, height = 5, dpi = 300)
library(dplyr)
library(caret)
library(glmnet)
set.seed(123)
idx_train <- createDataPartition(df$HbA1c, p = 0.80, list = FALSE)
y_train <- df$HbA1c[idx_train]
y_test  <- df$HbA1c[-idx_train]
# Cross-validation control (define once)
cv_ctrl <- trainControl(
method      = "repeatedcv",
number      = 5,
repeats     = 5,
search      = "random",
verboseIter = FALSE
)
# Ensure sex is factor
if (!is.factor(df$sex)) {
df$sex <- as.factor(df$sex)
}
library(dplyr)
library(caret)
library(glmnet)
set.seed(123)
idx_train <- createDataPartition(df$HbA1c, p = 0.80, list = FALSE)
y_train <- df$HbA1c[idx_train]
y_test  <- df$HbA1c[-idx_train]
# Cross-validation control (define once)
cv_ctrl <- trainControl(
method      = "repeatedcv",
number      = 5,
repeats     = 5,
search      = "random",
verboseIter = FALSE
)
# Ensure sex is factor
if (!is.factor(df$sex)) {
df$sex <- as.factor(df$sex)
}
# Select PGS columns and convert to data frame
X_pgs <- df %>% select(starts_with("PGS")) %>% as.data.frame()
# Split train/test
X_pgs_train <- X_pgs[idx_train, ]
X_pgs_test  <- X_pgs[-idx_train, ]
# Fit Elastic Net
set.seed(123)
enet_pgs <- train(
x          = X_pgs_train,
y          = y_train,
method     = "glmnet",
preProcess = c("center", "scale"),
tuneLength = 25,
trControl  = cv_ctrl
)
# Predict and evaluate
y_pred_pgs <- predict(enet_pgs, newdata = X_pgs_test)
r2_pgs <- cor(y_test, y_pred_pgs)^2
cat("Test-set R² (PGS only):", round(r2_pgs, 5), "\n")
# Select PGS columns and convert to data frame
X_pgs <- df %>% select(starts_with("PGS")) %>% as.data.frame()
# Split train/test
X_pgs_train <- X_pgs[idx_train, ]
X_pgs_test  <- X_pgs[-idx_train, ]
# Fit Elastic Net
set.seed(123)
enet_pgs <- train(
x          = X_pgs_train,
y          = y_train,
method     = "glmnet",
preProcess = c("center", "scale"),
tuneLength = 25,
trControl  = cv_ctrl
)
# Predict and evaluate
y_pred_pgs <- predict(enet_pgs, newdata = X_pgs_test)
r2_pgs <- cor(y_test, y_pred_pgs)^2
cat("Predictive Performance - R² (PRSmix_only):", round(r2_pgs, 5), "\n")
# Select PGS + sex columns
X_pgs_sex <- df %>% select(starts_with("PGS"), sex) %>% as.data.frame()
# Split train/test
X_pgs_sex_train <- X_pgs_sex[idx_train, ]
X_pgs_sex_test  <- X_pgs_sex[-idx_train, ]
# Fit Elastic Net
set.seed(123)
enet_pgs_sex <- train(
x          = X_pgs_sex_train,
y          = y_train,
method     = "glmnet",
preProcess = c("center", "scale"),  # sex won't be scaled since it's factor
tuneLength = 25,
trControl  = cv_ctrl
)
# Predict and evaluate
y_pred_pgs_sex <- predict(enet_pgs_sex, newdata = X_pgs_sex_test)
r2_pgs_sex <- cor(y_test, y_pred_pgs_sex)^2
cat("Predictive Performance - R² (PRSmix + Sex):", round(r2_pgs_sex, 5), "\n")
# Select PGS + sex + age columns
X_pgs_sex_age <- df %>% select(starts_with("PGS"), sex, age) %>% as.data.frame()
# Split train/test
X_pgs_sex_age_train <- X_pgs_sex_age[idx_train, ]
X_pgs_sex_age_test  <- X_pgs_sex_age[-idx_train, ]
# Fit Elastic Net
set.seed(123)
enet_pgs_sex_age <- train(
x          = X_pgs_sex_age_train,
y          = y_train,
method     = "glmnet",
preProcess = c("center", "scale"),
tuneLength = 25,
trControl  = cv_ctrl
)
# Predict and evaluate
y_pred_pgs_sex_age <- predict(enet_pgs_sex_age, newdata = X_pgs_sex_age_test)
r2_pgs_sex_age <- cor(y_test, y_pred_pgs_sex_age)^2
cat("Predictive Performance - R² (PGS + Sex + Age):", round(r2_pgs_sex_age, 5), "\n")
# Select PGS + sex + age columns
X_pgs_sex_age <- df %>% select(starts_with("PGS"), sex, age) %>% as.data.frame()
# Split train/test
X_pgs_sex_age_train <- X_pgs_sex_age[idx_train, ]
X_pgs_sex_age_test  <- X_pgs_sex_age[-idx_train, ]
# Fit Elastic Net
set.seed(123)
enet_pgs_sex_age <- train(
x          = X_pgs_sex_age_train,
y          = y_train,
method     = "glmnet",
preProcess = c("center", "scale"),
tuneLength = 25,
trControl  = cv_ctrl
)
# Predict and evaluate
y_pred_pgs_sex_age <- predict(enet_pgs_sex_age, newdata = X_pgs_sex_age_test)
r2_pgs_sex_age <- cor(y_test, y_pred_pgs_sex_age)^2
cat("Predictive Performance - R² (PGS + Sex + Age):", round(r2_pgs_sex_age, 5), "\n")
# Select PGS + sex + age + PC1-PC10 columns
X_full <- df %>% select(starts_with("PGS"), sex, age, PC1:PC10) %>% as.data.frame()
# Split train/test
X_full_train <- X_full[idx_train, ]
X_full_test  <- X_full[-idx_train, ]
# Fit Elastic Net
set.seed(123)
enet_full <- train(
x          = X_full_train,
y          = y_train,
method     = "glmnet",
preProcess = c("center", "scale"),
tuneLength = 25,
trControl  = cv_ctrl
)
# Predict and evaluate
y_pred_full <- predict(enet_full, newdata = X_full_test)
r2_full <- cor(y_test, y_pred_full)^2
cat("Predictive Performance - R² (PGS + Sex + Age + PCs):", round(r2_full, 5), "\n")
library(tidyr)
library(ggplot2)
# Create a data frame of R2 values and model names
r2_summary <- data.frame(
Model = c("PGS only", "PGS + Sex", "PGS + Sex + Age", "PGS + Sex + Age + PCs"),
R2 = c(r2_pgs, r2_pgs_sex, r2_pgs_sex_age, r2_full)
)
# Plot R² comparison
PRSmix_covariates <- ggplot(r2_summary, aes(x = reorder(Model, R2), y = R2, fill = R2)) +
geom_col() +
geom_text(aes(label = round(R2, 3)), vjust = -0.1) +
scale_fill_gradient(low = "brown", high = "darkgreen") +
labs(
title = "Test-set R² Comparison Across Models",
x = "Model",
y = expression(R^2)
) +
theme_minimal() +
coord_flip()
# Save the plot
ggsave("R² comparison.png", plot = p3, width = 6, height = 4, dpi = 300)
library(tidyr)
library(ggplot2)
# Create a data frame of R2 values and model names
r2_summary <- data.frame(
Model = c("PGS only", "PGS + Sex", "PGS + Sex + Age", "PGS + Sex + Age + PCs"),
R2 = c(r2_pgs, r2_pgs_sex, r2_pgs_sex_age, r2_full)
)
# Plot R² comparison
PRSmix_covariates <- ggplot(r2_summary, aes(x = reorder(Model, R2), y = R2, fill = R2)) +
geom_col() +
geom_text(aes(label = round(R2, 3)), vjust = -0.1) +
scale_fill_gradient(low = "brown", high = "darkgreen") +
labs(
title = "Test-set R² Comparison Across Models",
x = "Model",
y = expression(R^2)
) +
theme_minimal() +
coord_flip()
# Save the plot
ggsave("R² comparison.png", plot = PRSmix_covariates, width = 6, height = 4, dpi = 300)
# Save the plot
ggsave("R² comparison.png", plot = PRSmix_covariates, width = 8, height = 5, dpi = 300)
library(tidyr)
library(ggplot2)
# Create a data frame of R2 values and model names
r2_summary <- data.frame(
Model = c("PGS only", "PGS + Sex", "PGS + Sex + Age", "PGS + Sex + Age + PCs"),
R2 = c(r2_pgs, r2_pgs_sex, r2_pgs_sex_age, r2_full)
)
# Plot R² comparison
PRSmix_covariates <- ggplot(r2_summary, aes(x = reorder(Model, R2), y = R2, fill = R2)) +
geom_col() +
geom_text(aes(label = round(R2, 3)), vjust = -0.1) +
scale_fill_gradient(low = "brown", high = "darkgreen") +
labs(
title = "Predictive Performance - R² Comparison Across Models",
x = "Model",
y = expression(R^2)
) +
theme_minimal() +
coord_flip()
# Save the plot
ggsave("R² comparison.png", plot = PRSmix_covariates, width = 8, height = 5, dpi = 300)
library(tidyr)
library(ggplot2)
# Create a data frame of R2 values and model names
r2_summary <- data.frame(
Model = c("PGS only", "PGS + Sex", "PGS + Sex + Age", "PGS + Sex + Age + PCs"),
R2 = c(r2_pgs, r2_pgs_sex, r2_pgs_sex_age, r2_full)
)
# Plot R² comparison
PRSmix_covariates <- ggplot(r2_summary, aes(x = reorder(Model, R2), y = R2, fill = R2)) +
geom_col() +
geom_text(aes(label = round(R2, 3)), vjust = -0.1) +
scale_fill_gradient(low = "brown", high = "darkgreen") +
labs(
title = "Predictive Performance - R² Comparison Across Models",
x = "PRSmix_Model",
y = expression(R^2)
) +
theme_minimal() +
coord_flip()
# Save the plot
ggsave("R² comparison.png", plot = PRSmix_covariates, width = 8, height = 5, dpi = 300)
